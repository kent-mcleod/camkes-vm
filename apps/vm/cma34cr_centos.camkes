/*
 * Copyright 2017, Data61
 * Commonwealth Scientific and Industrial Research Organisation (CSIRO)
 * ABN 41 687 119 230.
 *
 * This software may be distributed and modified according to the terms of
 * the GNU General Public License version 2. Note that NO WARRANTY is provided.
 * See "LICENSE_GPLv2.txt" for details.
 *
 * @TAG(DATA61_GPL)
 */

#include <autoconf.h>
#include <configurations/vm.h>
#include <string_reverse.h>
#include <cma34cr_centos.h>

component Init0 {
    dataport Buf(STRING_REVERSE_BUFSIZE) dp1;
    dataport Buf(STRING_REVERSE_BUFSIZE) dp2;

    emits Ready ready;
    consumes Done done;

    has mutex cross_vm_event_mutex;

#ifndef PASSTHROUGH_ETHERNET
    uses Ethdriver ethdriver;
#endif

#ifndef PASSTHROUGH_SATA
    // sata server interface
#endif

    VM_INIT_DEF()
}

import <StringReverse/StringReverse.camkes>;
import <UDPServer/UDPServer.camkes>;
import <HelloWorld/HelloWorld.camkes>;
import <Firewall/Firewall.camkes>;
import <EthAdapter/EthAdapter.camkes>;

component VM {
    composition {
        VM_COMPOSITION_DEF()
        VM_PER_VM_COMP_DEF(0)

        component StringReverse string_reverse;

        connection seL4SharedDataWithCaps cross_vm_conn(from string_reverse.src_dp,
                                                        to vm0.dp1);

        connection seL4SharedDataWithCaps cross_vm_large_conn(from string_reverse.dest_dp,
                                                              to vm0.dp2);

        connection seL4Notification ev2_conn(from vm0.ready,
                                             to string_reverse.ready);

        connection seL4Notification ev1_conn(from string_reverse.done,
                                             to vm0.done);

        connection seL4RPCCall cross_vm_putchar(from string_reverse.putchar,
                                                to serial.processed_putchar);
#ifndef PASSTHROUGH_ETHERNET
        /* Ethernet driver that we share to Linux */
        component Ethdriver82574 ethdriver;
        component HWEthDriver82574 HWEthdriver;
        component Firewall firewall;
        component EthAdapter ethadapter;
        /* Hardware resources for the ethernet driver */
        connection seL4HardwareMMIO ethdrivermmio(from ethdriver.EthDriver, to HWEthdriver.mmio);
        connection seL4HardwareInterrupt hwethirq(from HWEthdriver.irq, to ethdriver.irq);

        /* Connect vm0 ethernet to the firewall */
        connection seL4Ethdriver firewall_con(from vm0.ethdriver, to ethdriver.client);
        connection seL4Ethdriver adapter_con_a(from ethadapter.a, to firewall.client);
        connection seL4Ethdriver adapter_con_b(from ethadapter.b, to ethdriver.client);
        connection seL4GlobalAsynchCallback adapter_global_callback_a(from ethadapter.dummy_a, to ethadapter.a_has_data);
        connection seL4GlobalAsynchCallback adapter_global_callback_b(from ethadapter.dummy_b, to ethadapter.b_has_data);

        /* Connect the firewall to the ethdriver */
        connection seL4Ethdriver ethdriver_con(from firewall.ethdriver, to ethdriver.client);
        /* Setup the firewall's global endpoint callback */
        connection seL4GlobalAsynchCallback firewall_global_callback(from firewall.dummy, to firewall.ethdriver_has_data);
#endif

#ifndef PASSTHROUGH_SATA
        // sata server instances and connections
#endif
    }
    configuration {
        VM_CONFIGURATION_DEF()
        VM_PER_VM_CONFIG_DEF(0)
        vm0.simple_untyped25_pool = 95;
        vm0.heap_size = 0x2000000;
        vm0.guest_ram_mb = 1900;
        vm0.kernel_cmdline = VM_GUEST_CMDLINE;
        vm0.kernel_image = C162_KERNEL_IMAGE;
        vm0.kernel_relocs = C162_KERNEL_IMAGE;
        vm0.initrd_image = C162_ROOTFS;
        vm0.iospace_domain = 0x0f;
        vm0_config.pci_devices_iospace = 1;

        vm0.dp1_id = 1;
        vm0.dp1_size = STRING_REVERSE_BUFSIZE;

        vm0.dp2_id = 2;
        vm0.dp2_size = STRING_REVERSE_BUFSIZE;

        // For VESA vframebuffer
        vm0.untyped_mmios = ["0xb0000000:28"];
        vm0.simple_extra_bootinfo = ["SEL4_BOOTINFO_HEADER_X86_VBE"];
        vm0.cnode_size_bits = 24;

#ifndef PASSTHROUGH_ETHERNET

        ethdriver.simple = true;
        ethdriver.cnode_size_bits = 12;
        ethdriver.iospaces = "0x12:0x6:0x0:0"; // <------------ may be different (corresponds to below)
        ethdriver.iospace_id = 0x12;
        ethdriver.pci_bdf = "6:0.0"; // <------------ may be different
        ethdriver.simple_untyped20_pool = 2;
        ethdriver.heap_size = 0x10000;
        ethdriver.dma_pool = 0x200000;

        HWEthdriver.mmio_paddr = 0xc0400000;
        HWEthdriver.mmio_size = 0x20000;
        HWEthdriver.irq_irq_type = "pci";
        HWEthdriver.irq_irq_ioapic = 0;
        HWEthdriver.irq_irq_ioapic_pin = 18;
        HWEthdriver.irq_irq_vector = 18;

        vm0.ethdriver_attributes = "3"; // This is a client id for the ethdriver component interface
        vm0.ethdriver_global_endpoint = "vm0";
        vm0.ethdriver_badge = "134479872";
        vm0.ethdriver_mac = [6, 0, 0, 11, 12, 14];

        firewall.ethdriver_attributes = "1"; // This is a client id for the ethdriver component interface
        firewall.ethdriver_global_endpoint = "firewall";
        firewall.ethdriver_badge = "134217729";
        firewall.ethdriver_mac = [6, 0, 0, 11, 12, 13];
        firewall.ethdriver_has_data_global_endpoint = "firewall";

        ethadapter.a_attributes = "1"; // This is the client id for the firewall component interface
        ethadapter.b_attributes = "2"; // This is the client id for the ethdriver component interface
        ethadapter.a_mac = [6, 0, 0, 11, 12, 13];
        ethadapter.b_mac = [6, 0, 0, 11, 12, 15];

        ethadapter.a_global_endpoint = "etha";
        ethadapter.a_has_data_global_endpoint = "etha";
        ethadapter.b_global_endpoint = "ethb";
        ethadapter.b_has_data_global_endpoint = "ethb";

#endif

#ifndef PASSTHROUGH_SATA
        // sata server attributes
#endif

        vm0_config.init_cons = [
#ifndef PASSTHROUGH_ETHERNET
            {"init":"make_virtio_net", "badge":134479872, "irq":"virtio_net_notify"},
#endif
#ifndef PASSTHROUGH_SATA
            // virtio block device init function
#endif
        ];

        vm0_config.ioports = [
            {"start":0x3000, "end":0x3020, "pci_device":0, "name":"Ethernet5"},
#ifdef PASSTHROUGH_ETHERNET
            {"start":0x2000, "end":0x2020, "pci_device":0, "name":"Ethernet6"},
#endif
#ifdef PASSTHROUGH_SATA
#ifdef SATA_AHCI
            {"start":0x4088, "end":0x4088 + 8, "pci_device":0x1f, "name":"SATA"},
            {"start":0x4094, "end":0x4094 + 4, "pci_device":0x1f, "name":"SATA"},
            {"start":0x4080, "end":0x4080 + 8, "pci_device":0x1f, "name":"SATA"},
            {"start":0x4060, "end":0x4060 + 32, "pci_device":0x1f, "name":"SATA"},
#else
            {"start":0x4080, "end":0x4090, "pci_device":0x1f, "name":"SATA"},
            {"start":0x4090, "end":0x40a0, "pci_device":0x1f, "name":"SATA"},
            {"start":0x40b0, "end":0x40b8, "pci_device":0x1f, "name":"SATA"},
            {"start":0x40b8, "end":0x40c0, "pci_device":0x1f, "name":"SATA"},
            {"start":0x40c8, "end":0x40cc, "pci_device":0x1f, "name":"SATA"},
            {"start":0x40cc, "end":0x40d0, "pci_device":0x1f, "name":"SATA"},
#endif
#endif
        ];

        vm0_config.pci_devices = [
#ifdef USB1
        {
            "name":"USB1",
            "bus":0, "dev":0x14, "fun":0,
            "irq":"USB1",
            "memory":[
#ifdef SATA_AHCI
                {"paddr":0xc0701000, "size":0x400, "page_bits":12},
#else
                {"paddr":0xc0700000, "size":0x400, "page_bits":12},
#endif
            ],
        },
#endif
        {
            "name":"USB2",
            "bus":0, "dev":0x1a, "fun":0,
            "irq":"USB2",
            "memory":[
#ifdef SATA_AHCI
                {"paddr":0xc0715000, "size":0x400, "page_bits":12},
#else
                {"paddr":0xc0714000, "size":0x400, "page_bits":12},
#endif
            ],
        },
        {
            "name":"USB3",
            "bus":0, "dev":0x1d, "fun":0,
            "irq":"USB3",
            "memory":[
#ifdef SATA_AHCI
                {"paddr":0xc0714000, "size":0x400, "page_bits":12},
#else
                {"paddr":0xc0713000, "size":0x400, "page_bits":12},
#endif
            ],
        },
        {
            "name":"Ethernet5",
            "bus":5, "dev":0, "fun":0,
            "irq":"Ethernet5",
            "memory":[
                {"paddr":0xc0500000, "size":0x20000, "page_bits":12},
                {"paddr":0xc0520000, "size":0x4000, "page_bits":12},
            ],
        },
#ifdef PASSTHROUGH_ETHERNET
        {
            "name":"Ethernet6",
            "bus":6, "dev":0, "fun":0,
            "irq":"Ethernet6",
            "memory":[
                {"paddr":0xc0400000, "size":0x20000, "page_bits":12},
                {"paddr":0xc0420000, "size":0x4000, "page_bits":12}
            ],
        },
#endif
#ifdef PASSTHROUGH_SATA
        {
            "name":"SATA",
            "bus":0, "dev":0x1f, "fun":2,
            "irq":"SATA",
            "memory":[
#ifdef SATA_AHCI
                {"paddr":0xc0713000, "size":0x800, "page_bits":12},
#endif
            ],
          },
#endif
        ];
        vm0_config.irqs = [
#ifdef USB1
            {"name":"USB1", "source":0x1c, "level_trig":1, "active_low":1, "dest":16},
#endif
            {"name":"USB2", "source":0x10, "level_trig":1, "active_low":1, "dest":14},
            {"name":"USB3", "source":0x17, "level_trig":1, "active_low":1, "dest":15},
            {"name":"Ethernet5", "source":0x11, "level_trig":1, "active_low":1, "dest":10},
#ifdef PASSTHROUGH_ETHERNET
            {"name":"Ethernet6", "source":0x12, "level_trig":1, "active_low":1, "dest":13},
#endif
#ifdef PASSTHROUGH_SATA
            {"name":"SATA", "source":19, "level_trig":1, "active_low":1, "dest":11},
#endif
        ];

        // These ranges are RMRR for the IOMMU and so we must exclude the from the guest
        // physical address space as we cannot overwrite the mappings that will already exist
        // in the iommu for them
        vm0_config.exclude_paddr = [ [0xaae84000, 0x20000], [0xab800000, 0x4200000]];
    }
}
